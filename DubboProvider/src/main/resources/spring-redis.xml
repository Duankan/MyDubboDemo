<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd">

    <!--引入Redis配置文件-->
    <context:property-placeholder location="classpath:redis.properties" ignore-unresolvable="true"/>
    <!-- jedis 连接池配置 -->
    <bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <property name="maxIdle" value="${redis.maxIdle}"/>
        <property name="maxWaitMillis" value="${redis.maxWait}"/>
        <property name="testOnBorrow" value="${redis.testOnBorrow}"/>
    </bean>
    <!-- redis集群连接池配置 -->
    <!--<bean id="redisClusterConfig" class="org.springframework.data.redis.connection.RedisClusterConfiguration">-->
    <!--<property name="maxRedirects" value="3"></property>-->
    <!--<property name="clusterNodes">-->
    <!--<set>-->
    <!--<bean class="org.springframework.data.redis.connection.RedisClusterNode">-->
    <!--<constructor-arg name="host" value="127.0.0.1"/>-->
    <!--<constructor-arg name="port" value="7001"/>-->
    <!--</bean>-->
    <!--<bean class="org.springframework.data.redis.connection.RedisClusterNode">-->
    <!--<constructor-arg name="host" value="127.0.0.1"/>-->
    <!--<constructor-arg name="port" value="7002"/>-->
    <!--</bean>-->
    <!--<bean class="org.springframework.data.redis.connection.RedisClusterNode">-->
    <!--<constructor-arg name="host" value="127.0.0.1"/>-->
    <!--<constructor-arg name="port" value="7003"/>-->
    <!--</bean>-->
    <!--<bean class="org.springframework.data.redis.connection.RedisClusterNode">-->
    <!--<constructor-arg name="host" value="127.0.0.1"/>-->
    <!--<constructor-arg name="port" value="7004"/>-->
    <!--</bean>-->
    <!--<bean class="org.springframework.data.redis.connection.RedisClusterNode">-->
    <!--<constructor-arg name="host" value="127.0.0.1"/>-->
    <!--<constructor-arg name="port" value="7005"/>-->
    <!--</bean>-->
    <!--<bean class="org.springframework.data.redis.connection.RedisClusterNode">-->
    <!--<constructor-arg name="host" value="127.0.0.1"/>-->
    <!--<constructor-arg name="port" value="7006"/>-->
    <!--</bean>-->
    <!--</set>-->
    <!--</property>-->
    <!--</bean>-->

    <!-- redis连接工厂 -->
    <bean id="connectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
        <property name="poolConfig" ref="poolConfig"/>
        <property name="port" value="${redis.port}"/>
        <property name="hostName" value="${redis.host}"/>
        <property name="password" value=""/>
        <property name="timeout" value="${redis.timeout}"></property>
    </bean>
    <!-- 集群的连接工厂配置 -->
    <!--<bean id="connectionFactory2" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">-->
    <!--<constructor-arg name="clusterConfig" ref="redisClusterConfig"></constructor-arg>-->
    <!--<constructor-arg name="poolConfig" ref="poolConfig"></constructor-arg>-->
    <!--</bean>-->

    <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
        <property name="connectionFactory" ref="connectionFactory"/>
        <!--序列化key-->
        <property name="keySerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
        </property>
        <!--序列化value-->
        <property name="valueSerializer">
            <!--自己封装的redis序列化与反序列化，有待完善-->
            <!--<bean class="com.github.Duankan.redis.MyRedisSerializer"></bean>-->
            <bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer"/>
        </property>
    </bean>
    <!-- 缓存拦截器配置 -->
    <bean id="methodCacheInterceptor" class="com.github.Duankan.interceptor.MethodCacheInterceptor">
        <property name="redisUtil" ref="redisUtil"/>
        <property name="defaultCacheExpireTime" value="${defaultCacheExpireTime}"/>
        <!-- 禁用缓存的类名列表 -->
        <property name="targetNamesList">
            <list>
                <value></value>
            </list>
        </property>
        <!-- 禁用缓存的方法名列表 -->
        <property name="methodNamesList">
            <list>
                <value></value>
            </list>
        </property>
    </bean>
    <bean id="redisUtil" class="com.github.Duankan.utils.RedisUtil">
        <property name="redisTemplate" ref="redisTemplate"/>
    </bean>
    <!--配置切面拦截方法 -->
    <aop:config proxy-target-class="true">
        <aop:pointcut id="controllerMethodPointcut" expression="
        execution(* com.github.Duankan.service.impl.*.query*(..))"/>
        <aop:advisor advice-ref="methodCacheInterceptor" pointcut-ref="controllerMethodPointcut"/>
    </aop:config>
    <!--匹配多个表达式-->
    <!--<aop:pointcut expression="execution(* com.travelsky.ccboy.dao..*.find*(..)) ||  -->
    <!--execution(* com.travelsky.ccboy.dao..*.query*(..))"  id="findCachePointcut" />-->
</beans>
